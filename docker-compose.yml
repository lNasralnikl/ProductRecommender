services:
    postgres:
        image: postgres:17
        volumes:
            - recom_data:/var/lib/postgresql/data
        container_name: recom-db
        environment:
            POSTGRES_DB: recommendation_db
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost" ]
            interval: 5s
            timeout: 3s
            retries: 10
        ports:
            - "5432:5432"
        networks:
            - recommendation_app

    consul:
        image: hashicorp/consul:1.19
        container_name: consul
        ports:
            - "8500:8500"
        command: agent -dev -client=0.0.0.0
        healthcheck:
            test: [ "CMD", "consul", "info" ]
            interval: 5s
            timeout: 3s
            retries: 10
        networks:
            - recommendation_app

    telegram-bot:
        build: ./bot
        container_name: recom-bot
        ports:
            - "8081:8080"
            - "5005:5005"
        environment:
            SPRING_APPLICATION_NAME: recom-bot

            SPRING_PROFILES_ACTIVE: dev
            SPRING_CLOUD_CONSUL_HOST: consul
            SPRING_CLOUD_CONSUL_PORT: 8500
            TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
            TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME}

            JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
        depends_on:
            consul:
                condition: service_healthy
        networks:
            - recommendation_app

    recom-api:
        build: ./ProductRecommender
        container_name: recom-api
        volumes:
            - ./ProductRecommender/data:/usr_data
        environment:
            SPRING_PROFILES_ACTIVE: dev
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            H2_URL: jdbc:h2:file:/usr_data/transaction
        depends_on:
            consul:
                condition: service_healthy
            postgres:
                condition: service_healthy
        restart: on-failure
        ports:
            - "8080:8080"
        networks:
            - recommendation_app

volumes:
    recom_data:

networks:
  recommendation_app:
    driver: bridge